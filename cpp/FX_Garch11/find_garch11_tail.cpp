#include <iostream>
#include <stdio.h>
#include <gsl/gsl_errno.h>
#include <gsl/gsl_roots.h>
#include <random>
#include <algorithm>
#include <armadillo>
#include <string.h>
#include <array>

using namespace std;
using namespace arma;
#define SAMPLE_SIZE 400000

random_device gen;
// mat<double> pool;

struct tail_fun_param
{
    double *coef;
};

struct prod_tail_fun_param
{
    const double *A;
    const double *B;
    double rho;
};

/**
 * The binomial coefficient "n choose k".
 */
unsigned long binomial_coef(unsigned long n, unsigned long k)
{
    unsigned long p = n;
    unsigned i = 1;
    if (k == 0 || k == n) return 1;
    if (k > n) return 0;
    for (p = n; i < k; i++) {
	p *= n - i;
    }
    for (i = k; i > 1; i--) {
	p /= i;
    }
    return p;
}

unsigned long factorial(unsigned long n)
{
    if (n == 0) return 1;
    unsigned long p = n;
    while (n > 1) {
	p *= --n;
    }
    return p;
}

unsigned long double_factorial(unsigned long n)
{
    if (n == 0) return 1;
    unsigned long p = n;
    while (n > 2) {
	n -= 2;
	p *= n;
    }
    return p;
}

double prod_expectation_func(const unsigned long *expo, double rho)
{
    double s = 0;
    unsigned long l = min(expo[0], expo[1]);
    for (unsigned long k = 0; k <= l; k++) {
	double t = pow(rho, 2*k);
	t *= binomial_coef(2*expo[0], 2*k);
	t *= binomial_coef(2*expo[1], 2*k);
	t *= factorial(2*k);
	if (k < expo[0])
	    t *= double_factorial(2*expo[0] - 2*k - 1);
	if (k < expo[1])
	    t *= double_factorial(2*expo[1] - 2*k - 1);
	s += t;
    }
    return s;
}

double tail_fun(double xi, void *param)
{
    struct tail_fun_param *pack = (struct tail_fun_param *)param;
    double *coef = pack->coef;
    double t1 = pow(coef[1], xi);
    double t2 = coef[0]/coef[1];
    double r = t1;
    double inc = 0;
    unsigned long m = 1;
    double f1 = 1;
    double f2 = t2;
    double f3 = 1;
    double f4 = xi;
    do {
	inc = t1 * f2 * f3 * f4 / f1;
	r += inc;

	m++;
	f1 *= m;
	f2 *= t2;
	f3 *= 2*m - 1;
	f4 *= xi - m + 1;
    } while (inc > 1.0e-4);
    return r - 1;
}

double prod_tail_fun(double xi, void *param)
{
    struct prod_tail_fun_param *pack = (struct prod_tail_fun_param *)param;
    const double *A = pack->A;
    const double *B = pack->B;
    double r = pow(A[1] * B[1], xi);
    double s = r;
    double inc = 0;
    double prod1 = 1, prod2= 1;
    double E1 = 1, E2 = 1, E12 = 0;
    unsigned long mn[2] = {1, 1};
    
    do {
	double x1 = pow(A[0]/A[1], mn[0]);
	double x2 = pow(B[0]/B[1], mn[1]);
	x1 /= factorial(mn[0]);
	x2 /= factorial(mn[1]);
	prod1 *= xi - mn[0] + 1;
	prod2 *= xi - mn[1] + 1;
	x1 *= prod1;
	x2 *= prod2;
	    
	E12 = prod_expectation_func(mn, pack->rho);
	E1 *= (2*mn[0] - 1);
	E2 *= (2*mn[1] - 1);
	
	inc = x1 * E1 + x2 * E2 + x1 * x2 * E12;
	inc *= s;

	r += inc;
	mn[0]++;
	mn[1]++;
    } while (inc > 1.0e-4);
    return r - 1;
}

double tail_index(double coef[2])
{
    gsl_root_fsolver *solver;
    gsl_function F;
    int iter = 0;
    int status = 0;
    int max_iter = 100;
    double lb, ub = 30, xi = -1;

    double a;
    double bounds[2];
    struct tail_fun_param param = {coef};
    for (a = 2; a > 0 && tail_fun(a, &param) > 0; a -= 1);
    if (a > 0) {
    	bounds[0] = a;
    } else {
    	printf("%s %.2f.\n", "lower bound less than ", a);
    	return -1;
    }
    for (a = 2; a < ub && tail_fun(a, &param) < 0; a += 1);
    if (a < ub) {
    	bounds[1] = a;
    } else {
    	printf("%s %.2f.\n", "Upper bound larger than ", (double)ub);
    	return -1;
    }

    F.function = tail_fun;
    F.params = &param;

    solver = gsl_root_fsolver_alloc(gsl_root_fsolver_brent);
    gsl_root_fsolver_set(solver, &F, bounds[0], bounds[1]);

    do {
	iter++;
	status = gsl_root_fsolver_iterate (solver);
	xi = gsl_root_fsolver_root (solver);
	lb = gsl_root_fsolver_x_lower(solver);
	ub = gsl_root_fsolver_x_upper(solver);
	status = gsl_root_test_interval(lb, ub, 1.0e-6, 0);
	// if (status == GSL_SUCCESS)
	//     cout << "Tail index found: xi = " << xi << endl;
    } while (status == GSL_CONTINUE && iter < max_iter);
    gsl_root_fsolver_free(solver);

    if (status != GSL_SUCCESS) {
	// cout << "The Brent algorithm did not converge after " << max_iter
	//      << " iterations." << endl;
	xi = -1;
    }
    return xi;
}

double prod_tail_index(double coef1[2], double coef2[2], double cov)
{
    gsl_root_fsolver *solver;
    gsl_function F;
    int iter = 0;
    int status = 0;
    int max_iter = 100;
    double lb, ub = 30, xi = -1;

    double a = 2;
    double bounds[2];
    struct prod_tail_fun_param param = {coef1, coef2};
    if (prod_tail_fun(a, &param) > 0) {
	while (prod_tail_fun(a, &param) > 0) a -= 1;
	bounds[0] = a;
	bounds[1] = a + 1;
    } else {
	while (prod_tail_fun(a, &param) < 0) a += 1;
	bounds[0] = a - 1;
	bounds[1] = a;
    }

    F.function = prod_tail_fun;
    F.params = &param;

    solver = gsl_root_fsolver_alloc(gsl_root_fsolver_brent);
    gsl_root_fsolver_set(solver, &F, bounds[0], bounds[1]);

    do {
	iter++;
	status = gsl_root_fsolver_iterate (solver);
	xi = gsl_root_fsolver_root (solver);
	lb = gsl_root_fsolver_x_lower(solver);
	ub = gsl_root_fsolver_x_upper(solver);
	status = gsl_root_test_interval(lb, ub, 1.0e-6, 0);
	// if (status == GSL_SUCCESS)
	//     cout << "Tail index found: xi = " << xi << endl;
    } while (status == GSL_CONTINUE && iter < max_iter);
    gsl_root_fsolver_free(solver);

    if (status != GSL_SUCCESS) {
	// cout << "The Brent algorithm did not converge after " << max_iter
	//      << " iterations." << endl;
	xi = -1;
    }
    return xi;
}

int main(int argc, char *argv[])
{
    // double coef[2];
    // coef[0] = 1.0e-7;
    // coef[1] = stod(argv[1]);
    // coef[2] = stod(argv[2]);

    /**
       These are values obtained using the fGarch package.
     */
    double coef[][2] = {
    	{0.0333595465136058,  0.935462645685956},
    	{0.0129814902539519,  0.982156632926710},
    	{0.0355747855877685,  0.959357802762939},
    	{0.0160964734982745,  0.978232215797576},
    	{0.0691075334956582,  0.881676778393785},
    	{0.0685060663688339,  0.883690620885534},
    	{0.0697364292173322,  0.892126609515694},
    	{0.0393300789355985,  0.953107657508420},
    	{0.0398855744760083,  0.948950588639140},
    	{0.0592371608362950,  0.932987967998614},
    	{0.0608751942941075,  0.900850053580394},
    	{0.0397208752411525,  0.951096271431723},
    	{0.0276614424135275,  0.968677095189546},
    	{0.0310147328057462,  0.961939617257637},
    	{0.0198512714753665,  0.973700216994867},
    	{0.0537300110625453,  0.924474900212370},
    	{0.0392929313584584,  0.953560592370058}
    };

    double varcov [][17] = {
    	{1, 0.669373380195363, 0.464786070633786, 0.232241044065783, 0.301931053094307, 0.300819121771269, 0.471859859133159, 0.461783943939229, 0.241426921444126, 0.364352744551913, 0.632216615688306, 0.355932142424239, 0.582497296688298, 0.315136952413253, 0.761249405223686, 0.648734819278494, 0.455067503601205},
    	{0.669373380195363, 1, 0.682216456857965, 0.28564933040021, 0.403200607937382, 0.399262088083759, 0.614613578696547, 0.696521094381235, 0.167223689064189, 0.510527261775464, 0.664674951486154, 0.484201903632382, 0.615133642738711, 0.358333442794494, 0.598801542195879, 0.755826752595378, 0.695850629017868},
    	{0.464786070633786, 0.682216456857965, 1, 0.295472569461776, 0.541543103975116, 0.537845544947713, 0.697881335786559, 0.952053242275239, 0.0377028078812318, 0.737624153269522, 0.658324580069529, 0.664439796807126, 0.507937558031846, 0.244289590175636, 0.422932455154974, 0.858972696964364, 0.95460279437536},
    	{0.232241044065783, 0.28564933040021, 0.295472569461776, 1, 0.758327675455036, 0.758273490533149, 0.372337785020873, 0.299518256024636, 0.519623144014893, 0.287890848079932, 0.273157434632663, 0.594729950127318, 0.233585460525581, 0.248962749035133, 0.244416584538928, 0.388891006500512, 0.299217604005703},
    	{0.301931053094307, 0.403200607937382, 0.541543103975116, 0.758327675455036, 1, 0.998939766976158, 0.571038246597074, 0.549541706370983, 0.448215524917665, 0.520996546755114, 0.405134498547661, 0.834780773836922, 0.291946382845743, 0.314505759477557, 0.321298839914128, 0.58724331538277, 0.552375431152225},
    	{0.300819121771269, 0.399262088083759, 0.537845544947713, 0.758273490533149, 0.998939766976158, 1, 0.568271666805865, 0.546154865513154, 0.449564394216971, 0.519007852852421, 0.402333886291538, 0.834336832181381, 0.292050889632662, 0.314662158606586, 0.320709306169859, 0.584895400268014, 0.549222113475339},
    	{0.471859859133159, 0.614613578696547, 0.697881335786559, 0.372337785020873, 0.571038246597074, 0.568271666805865, 1, 0.723292920441249, 0.184474639012553, 0.588148471959225, 0.559564101013708, 0.605447900238591, 0.446770912825022, 0.298373972055242, 0.457433612232791, 0.727955872155998, 0.725044220915399},
    	{0.461783943939229, 0.696521094381235, 0.952053242275239, 0.299518256024636, 0.549541706370983, 0.546154865513154, 0.723292920441249, 1, 0.0344817307458453, 0.764809766063511, 0.659197075807358, 0.675696589595487, 0.515948265791794, 0.245194647881277, 0.426121169381712, 0.877170785742397, 0.995980032523156},
    	{0.241426921444126, 0.167223689064189, 0.0377028078812318, 0.519623144014893, 0.448215524917665, 0.449564394216971, 0.184474639012553, 0.0344817307458453, 1, 0.00253043824878582, 0.202339858787924, 0.316790873190302, 0.259167677878366, 0.206521853362169, 0.239865593910444, 0.191375297169156, 0.0309863915237204},
    	{0.364352744551913, 0.510527261775464, 0.737624153269522, 0.287890848079932, 0.520996546755114, 0.519007852852421, 0.588148471959225, 0.764809766063511, 0.00253043824878582, 1, 0.499626263230065, 0.589350485565211, 0.314546071670067, 0.191504689630016, 0.352370235584457, 0.732387061978369, 0.766888496266103},
    	{0.632216615688306, 0.664674951486154, 0.658324580069529, 0.273157434632663, 0.405134498547661, 0.402333886291538, 0.559564101013708, 0.659197075807358, 0.202339858787924, 0.499626263230065, 1, 0.492875034021309, 0.55487358505922, 0.30473078275775, 0.552201229768552, 0.790467752060754, 0.653727301011015},
    	{0.355932142424239, 0.484201903632382, 0.664439796807126, 0.594729950127318, 0.834780773836922, 0.834336832181381, 0.605447900238591, 0.675696589595487, 0.316790873190302, 0.589350485565211, 0.492875034021309, 1, 0.351095316357393, 0.281533156379539, 0.338765043170621, 0.670760988236642, 0.678074331216711},
    	{0.582497296688298, 0.615133642738711, 0.507937558031846, 0.233585460525581, 0.291946382845743, 0.292050889632662, 0.446770912825022, 0.515948265791794, 0.259167677878366, 0.314546071670067, 0.55487358505922, 0.351095316357393, 1, 0.275527806143073, 0.503940837541148, 0.612521333396119, 0.511868452195206},
    	{0.315136952413253, 0.358333442794494, 0.244289590175636, 0.248962749035133, 0.314505759477557, 0.314662158606586, 0.298373972055242, 0.245194647881277, 0.206521853362169, 0.191504689630016, 0.30473078275775, 0.281533156379539, 0.275527806143073, 1, 0.289331685108988, 0.326692632695095, 0.242891575572914},
    	{0.761249405223686, 0.598801542195879, 0.422932455154974, 0.244416584538928, 0.321298839914128, 0.320709306169859, 0.457433612232791, 0.426121169381712, 0.239865593910444, 0.352370235584457, 0.552201229768552, 0.338765043170621, 0.503940837541148, 0.289331685108988, 1, 0.588431344934906, 0.420920439011483},
    	{0.648734819278494, 0.755826752595378, 0.858972696964364, 0.388891006500512, 0.58724331538277, 0.584895400268014, 0.727955872155998, 0.877170785742397, 0.191375297169156, 0.732387061978369, 0.790467752060754, 0.670760988236642, 0.612521333396119, 0.326692632695095, 0.588431344934906, 1, 0.87776751952863},
    	{0.455067503601205, 0.695850629017868, 0.95460279437536, 0.299217604005703, 0.552375431152225, 0.549222113475339, 0.725044220915399, 0.995980032523156, 0.0309863915237204, 0.766888496266103, 0.653727301011015, 0.678074331216711, 0.511868452195206, 0.242891575572914, 0.420920439011483, 0.87776751952863, 1}
    };

    /**
       These are values obtained using Olivier's code.
     */
    // double coef[][2] = {
    // };
    // double varcov [][17] = {
    // 	{1, 0.675270088391908, 0.493785196572312, 0.235027025153097, 0.307349606771137, 0.306368412887458, 0.487465577268582, 0.486616426477086, 0.244380765705274, 0.399866857454945, 0.642633751258498, 0.379080971886094, 0.598613569194483, 0.325682701138618, 0.762724141416925, 0.667642834102445, 0.481337199876518},
    // 	{0.675270088391908, 1, 0.694620719776739, 0.291905580574915, 0.407081382091268, 0.402836596748865, 0.619588206810347, 0.704166314451801, 0.190254826960892, 0.528821095808081, 0.672591887952603, 0.510266515225552, 0.622195340744663, 0.372250859115362, 0.597397041524027, 0.755899105196263, 0.703555644131804},
    // 	{0.493785196572312, 0.694620719776739, 1, 0.307016679347872, 0.53093723441199, 0.526724667365114, 0.691168278326457, 0.956542038163553, 0.0920773341799744, 0.701284178163772, 0.685891499322532, 0.68528004561479, 0.518157234658013, 0.27824627538751, 0.428803503025327, 0.859952353481029, 0.958627143638587},
    // 	{0.235027025153097, 0.291905580574915, 0.307016679347872, 1, 0.75607712420698, 0.756314143359994, 0.373584013959863, 0.304550377010775, 0.522393268520022, 0.290389858852385, 0.28544170768139, 0.610483626573745, 0.245305126777348, 0.267507249740139, 0.252239233845926, 0.390438892400212, 0.30457997336031},
    // 	{0.307349606771137, 0.407081382091268, 0.53093723441199, 0.75607712420698, 1, 0.998906526868772, 0.566201489891174, 0.533253014191073, 0.472206458223138, 0.50710894586455, 0.421725614965961, 0.853325346087922, 0.297593922284085, 0.34886291326023, 0.332865669054138, 0.58065932545827, 0.535408160961008},
    // 	{0.306368412887458, 0.402836596748865, 0.526724667365114, 0.756314143359994, 0.998906526868772, 1, 0.563137091965684, 0.529274813475957, 0.473578599899736, 0.50442770148646, 0.418793915427957, 0.852720868790592, 0.297587605331209, 0.349051354288899, 0.332185365011343, 0.577825034813688, 0.531636376117441},
    // 	{0.487465577268582, 0.619588206810347, 0.691168278326457, 0.373584013959863, 0.566201489891174, 0.563137091965684, 1, 0.705820578474701, 0.215292928685538, 0.560338334105771, 0.578894252882121, 0.625525106844101, 0.452801748460099, 0.329963332392719, 0.463631791465702, 0.719968449800925, 0.7060941230539},
    // 	{0.486616426477086, 0.704166314451801, 0.956542038163553, 0.304550377010775, 0.533253014191073, 0.529274813475957, 0.705820578474701, 1, 0.0815241008912532, 0.727727366955278, 0.680872462098897, 0.692460114693113, 0.523923594500802, 0.273704666267239, 0.428907719365842, 0.871143288830717, 0.996574801301382},
    // 	{0.244380765705274, 0.190254826960892, 0.0920773341799744, 0.522393268520022, 0.472206458223138, 0.473578599899736, 0.215292928685538, 0.0815241008912532, 1, 0.0496126108834845, 0.219785718722831, 0.356636981055566, 0.295657688904984, 0.230931285463952, 0.252704344527767, 0.221842595075512, 0.0782733723427946},
    // 	{0.399866857454945, 0.528821095808081, 0.701284178163772, 0.290389858852385, 0.50710894586455, 0.50442770148646, 0.560338334105771, 0.727727366955278, 0.0496126108834845, 1, 0.529763401377711, 0.580622276538656, 0.317763060784598, 0.220990308156433, 0.378522780574255, 0.722847147963756, 0.728310299335033},
    // 	{0.642633751258498, 0.672591887952603, 0.685891499322532, 0.28544170768139, 0.421725614965961, 0.418793915427957, 0.578894252882121, 0.680872462098897, 0.219785718722831, 0.529763401377711, 1, 0.530866728358796, 0.572840356425411, 0.320709113942113, 0.554340308925622, 0.805372525008432, 0.676422159293297},
    // 	{0.379080971886094, 0.510266515225552, 0.68528004561479, 0.610483626573745, 0.853325346087922, 0.852720868790592, 0.625525106844101, 0.692460114693113, 0.356636981055566, 0.580622276538656, 0.530866728358796, 1, 0.382154400913986, 0.32406628073644, 0.356205439275332, 0.688837508748728, 0.6946916766529},
    // 	{0.598613569194483, 0.622195340744663, 0.518157234658013, 0.245305126777348, 0.297593922284085, 0.297587605331209, 0.452801748460099, 0.523923594500802, 0.295657688904984, 0.317763060784598, 0.572840356425411, 0.382154400913986, 1, 0.297105494180935, 0.518216395449942, 0.617962767713292, 0.520461024815379},
    // 	{0.325682701138618, 0.372250859115362, 0.27824627538751, 0.267507249740139, 0.34886291326023, 0.349051354288899, 0.329963332392719, 0.273704666267239, 0.230931285463952, 0.220990308156433, 0.320709113942113, 0.32406628073644, 0.297105494180935, 1, 0.293279873739854, 0.347934950580837, 0.271898670064875},
    // 	{0.762724141416925, 0.597397041524027, 0.428803503025327, 0.252239233845926, 0.332865669054138, 0.332185365011343, 0.463631791465702, 0.428907719365842, 0.252704344527767, 0.378522780574255, 0.554340308925622, 0.356205439275332, 0.518216395449942, 0.293279873739854, 1, 0.594529522255148, 0.424916751255949},
    // 	{0.667642834102445, 0.755899105196263, 0.859952353481029, 0.390438892400212, 0.58065932545827, 0.577825034813688, 0.719968449800925, 0.871143288830717, 0.221842595075512, 0.722847147963756, 0.805372525008432, 0.688837508748728, 0.617962767713292, 0.347934950580837, 0.594529522255148, 1, 0.870856887743641},
    // 	{0.481337199876518, 0.703555644131804, 0.958627143638587, 0.30457997336031, 0.535408160961008, 0.531636376117441, 0.7060941230539, 0.996574801301382, 0.0782733723427946, 0.728310299335033, 0.676422159293297, 0.6946916766529, 0.520461024815379, 0.271898670064875, 0.424916751255949, 0.870856887743641, 1}
    // };

    const int d = sizeof(coef)/sizeof(coef[0]);
    array<array<double, d>, d> indices;
    for (int i = 0; i < d; i++) {
    	for (int j = 0; j <= i; j++) {
	    if (j == i) {
		indices[i][i] = tail_index(coef[i]);
		printf("%-8.3f", indices[i][i]);
	    } else {
		indices[i][j] = prod_tail_index(coef[i], coef[j], varcov[i][j]);
		printf("%-8.3f", indices[i][j]);
	    }
    	}
	printf("\n");
    }
    // double I[d];
    // for (int i = 0; i < d; i++) {
    // 	if (i == 7)
    // 	    I[i] = tail_index(coef[7]);
    // 	else
    // 	    I[i] = prod_tail_index(coef[i], coef[7], varcov[i][7]);
    // 	printf("% 5.3f\n", I[i]);
    // }

    // for (a = 2; a > 0 && fun(a, coef) > 0; a -= 1);
    // if (a > 0) {
    // 	bounds[0] = a;
    // } else {
    // 	printf("%s %.2f.\n", "lower bound less than ", a);
    // 	return 0;
    // }
    // for (a = 2; a < ub && fun(a, coef) < 0; a += 1);
    // if (a < ub) {
    // 	bounds[1] = a;
    // } else {
    // 	printf("%s %.2f.\n", "Upper bound larger than ", (double)ub);
    // 	return 0;
    // }
    // double xi = tail_index(coef);
    // cout << xi << endl;
}
